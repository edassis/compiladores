/* This block of code will go into the header file generated by bison */
%code requires{
   class Data;
}

/* This block will be put into the cpp source code */
%{
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include "lexer.hpp"
#include "globals.h"
void yyerror(const char *msg);

class Data {
public:
   int data;
   Data() { data = 0; }
   ~Data() {}
};

%}

%union{
   double dval;
   int ival;
   char* text;
   Data* cval;
}

%define parse.error verbose
%locations

%start program
%token MULT DIV PLUS MINUS EQUAL SEMI LPAREN RPAREN ESCREVA
%token <text> ID TYPE
%token <dval> NUM
%type <cval> program
%type ival exp
%type <dval> simple_exp term
%left PLUS MINUS
%left MULT DIV

%% 
program: stmt_seq                    { $$ = new Data(); }
         ;

stmt_seq: stmt                       {} 
          | stmt_seq SEMI stmt       {}
			 ;

stmt: decl_stmt                      {} 
      | assign_stmt                  {}
      | func_stmt                    {}
      ;

assign_stmt: ID EQUAL simple_exp            { printf("\t%s = %f\n", $1, $3); }
             | decl_stmt EQUAL simple_exp   { printf("\t%f\n", $3); }
             ;

decl_stmt: TYPE ID                   { printf("\t%s\n", $2); }
           ;

func_stmt: write_func               {}
           ;

write_func: ESCREVA LPAREN simple_exp RPAREN    { printf("\t%f\n", $3); }
            ;

simple_exp: term                                { $$ = $1; }
            | simple_exp PLUS simple_exp        { $$ = $1 + $3; }
            | simple_exp MINUS simple_exp       { $$ = $1 - $3; }
            ;

term: NUM
      | MINUS term                  { $$ = -$2; }
      | term MULT term              { $$ = $1 * $3; }
      | term DIV term               { if ($3==0) yyerror("divide by zero"); else $$ = $1 / $3; }
      ;
            
%%

int lineno = 0;

int main(int argc, char **argv) {
   if (argc > 1) {
      yyin = fopen(argv[1], "r");
      if (yyin == NULL){
         printf("syntax: %s filename\n", argv[0]);
      }
   }

   yyparse(); // Calls yylex() for tokens.
   
   return 0;
}

void yyerror(const char *msg) {
   printf("** Line %d: %s\n", lineno, msg);
}
